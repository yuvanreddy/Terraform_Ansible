---
- name: Install JDK on Windows instances via SSM
  hosts: localhost
  gather_facts: no
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    
  tasks:
    - name: Debug input variables
      debug:
        msg:
          - "Instance IDs: {{ instance_ids }}"
          - "S3 Bucket: {{ s3_bucket | default('Not provided') }}"
          - "S3 Key: {{ s3_key | default('Not provided') }}"
          - "AWS Region: {{ aws_region }}"
          - "Presigned URL Available: {{ 'Yes' if presigned_url is defined and presigned_url else 'No' }}"

    - name: Parse instance IDs
      set_fact:
        target_instances: "{{ instance_ids | from_json if instance_ids is string else instance_ids }}"

    - name: Validate instance IDs
      fail:
        msg: "No valid instance IDs provided"
      when: target_instances | length == 0

    - name: Check if instances are running and SSM-enabled
      amazon.aws.aws_ssm_info:
        filters:
          - key: InstanceIds
            values: "{{ target_instances }}"
        region: "{{ aws_region }}"
      register: ssm_instances

    - name: Display SSM-enabled instances
      debug:
        msg: "SSM-enabled instances: {{ ssm_instances.instance_information | map(attribute='InstanceId') | list }}"

    - name: Wait for all instances to be SSM-ready
      amazon.aws.aws_ssm_info:
        filters:
          - key: InstanceIds
            values: "{{ target_instances }}"
        region: "{{ aws_region }}"
      register: ssm_check
      until: ssm_check.instance_information | length == target_instances | length
      retries: 30
      delay: 10
      failed_when: false

    - name: Create PowerShell script for JDK installation
      set_fact:
        jdk_install_script: |
          # JDK Installation Script for Windows
          param(
              [string]$PresignedUrl,
              [string]$S3Bucket,
              [string]$S3Key
          )
          
          Write-Output "Starting JDK installation process..."
          Write-Output "Timestamp: $(Get-Date)"
          
          # Define installation parameters
          $TempDir = "C:\Temp"
          $JavaDir = "C:\Program Files\Java"
          $LogFile = "$TempDir\jdk-install-log.txt"
          
          # Create directories
          if (!(Test-Path $TempDir)) {
              New-Item -ItemType Directory -Path $TempDir -Force
          }
          if (!(Test-Path $JavaDir)) {
              New-Item -ItemType Directory -Path $JavaDir -Force
          }
          
          # Function to write log
          function Write-Log {
              param([string]$Message)
              $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              $LogMessage = "[$Timestamp] $Message"
              Write-Output $LogMessage
              Add-Content -Path $LogFile -Value $LogMessage
          }
          
          Write-Log "JDK installation started"
          
          try {
              # Download JDK installer
              if ($PresignedUrl -and $PresignedUrl -ne "") {
                  Write-Log "Downloading JDK from presigned URL..."
                  $InstallerPath = "$TempDir\jdk-installer.msi"
                  
                  # Download with retry logic
                  $MaxRetries = 3
                  $RetryCount = 0
                  $Downloaded = $false
                  
                  while ($RetryCount -lt $MaxRetries -and -not $Downloaded) {
                      try {
                          Invoke-WebRequest -Uri $PresignedUrl -OutFile $InstallerPath -UseBasicParsing -TimeoutSec 300
                          if (Test-Path $InstallerPath) {
                              $FileSize = (Get-Item $InstallerPath).Length
                              Write-Log "Download completed. File size: $($FileSize / 1MB) MB"
                              $Downloaded = $true
                          }
                      }
                      catch {
                          $RetryCount++
                          Write-Log "Download attempt $RetryCount failed: $($_.Exception.Message)"
                          if ($RetryCount -lt $MaxRetries) {
                              Start-Sleep -Seconds 30
                          }
                      }
                  }
                  
                  if (-not $Downloaded) {
                      throw "Failed to download JDK installer after $MaxRetries attempts"
                  }
              }
              elseif ($S3Bucket -and $S3Key) {
                  Write-Log "Downloading JDK from S3 using AWS CLI..."
                  $InstallerPath = "$TempDir\jdk-installer.msi"
                  
                  # Use AWS CLI to download
                  $AwsCommand = "aws s3 cp s3://$S3Bucket/$S3Key $InstallerPath"
                  $Result = cmd /c $AwsCommand 2>&1
                  
                  if ($LASTEXITCODE -eq 0 -and (Test-Path $InstallerPath)) {
                      Write-Log "S3 download completed successfully"
                  } else {
                      throw "Failed to download from S3: $Result"
                  }
              }
              else {
                  # Try to find existing installer
                  $PossiblePaths = @(
                      "$TempDir\*.msi",
                      "C:\Downloads\*.msi",
                      "D:\installers\*.msi"
                  )
                  
                  $InstallerPath = $null
                  foreach ($Path in $PossiblePaths) {
                      $Files = Get-ChildItem -Path $Path -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*jdk*" -or $_.Name -like "*java*" }
                      if ($Files) {
                          $InstallerPath = $Files[0].FullName
                          Write-Log "Found existing installer: $InstallerPath"
                          break
                      }
                  }
                  
                  if (-not $InstallerPath) {
                      throw "No JDK installer found and no download source provided"
                  }
              }
              
              # Verify installer file
              if (!(Test-Path $InstallerPath)) {
                  throw "Installer file not found: $InstallerPath"
              }
              
              $InstallerSize = (Get-Item $InstallerPath).Length
              Write-Log "Installer ready: $InstallerPath (Size: $($InstallerSize / 1MB) MB)"
              
              # Check if JDK is already installed
              $ExistingJava = Get-Command java -ErrorAction SilentlyContinue
              if ($ExistingJava) {
                  $JavaVersion = & java -version 2>&1 | Select-Object -First 1
                  Write-Log "Existing Java found: $JavaVersion"
                  
                  # Check if it's the target version (OpenJDK 21)
                  if ($JavaVersion -match "21\.") {
                      Write-Log "OpenJDK 21 is already installed. Skipping installation."
                      return
                  }
              }
              
              # Install JDK silently
              Write-Log "Starting JDK installation..."
              
              # Determine installer type and install accordingly
              $InstallerExt = [System.IO.Path]::GetExtension($InstallerPath).ToLower()
              
              if ($InstallerExt -eq ".msi") {
                  # MSI installation
                  $InstallArgs = @(
                      "/i", "`"$InstallerPath`"",
                      "/quiet",
                      "/norestart",
                      "INSTALLDIR=`"C:\Program Files\Java\jdk-21`"",
                      "ADDLOCAL=FeatureMain,FeatureEnvironment,FeatureJarFileRunWith,FeatureJavaHome"
                  )
                  
                  Write-Log "Running MSI installer with arguments: $($InstallArgs -join ' ')"
                  $Process = Start-Process -FilePath "msiexec.exe" -ArgumentList $InstallArgs -Wait -PassThru -NoNewWindow
                  
              } elseif ($InstallerExt -eq ".exe") {
                  # EXE installation
                  $InstallArgs = @(
                      "/s",
                      "INSTALLDIR=C:\