---
- name: Install JDK via SSM on Windows instances
  hosts: localhost
  gather_facts: false
  vars:
    aws_region: "{{ aws_region }}"
    instance_ids: "{{ instance_ids | from_json }}"
    s3_bucket: "{{ s3_bucket }}"
    s3_key: "{{ s3_key }}"
    presigned_url: "{{ presigned_url }}"
    
  tasks:
    - name: Display installation parameters
      debug:
        msg:
          - "Installing JDK on instances: {{ instance_ids }}"
          - "S3 location: s3://{{ s3_bucket }}/{{ s3_key }}"
          - "AWS Region: {{ aws_region }}"

    - name: Install JDK via SSM
      amazon.aws.aws_ssm_send_command:
        region: "{{ aws_region }}"
        instance_ids: "{{ instance_ids }}"
        document_name: "AWS-RunPowerShellScript"
        parameters:
          commands:
            - |
              Write-Host "=== JDK Installation Started ==="
              Write-Host "Timestamp: $(Get-Date)"
              
              # Set variables
              $downloadUrl = "{{ presigned_url }}"
              $installerPath = "C:\temp\jdk_installer.msi"
              $logPath = "C:\temp\jdk_install.log"
              
              # Create temp directory
              if (-not (Test-Path "C:\temp")) {
                  New-Item -ItemType Directory -Path "C:\temp" -Force
              }
              
              try {
                  # Download JDK installer
                  Write-Host "üì• Downloading JDK installer..."
                  Write-Host "Download URL: $downloadUrl"
                  
                  # Use TLS 1.2 for secure downloads
                  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                  
                  Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -UseBasicParsing
                  
                  if (-not (Test-Path $installerPath)) {
                      throw "Downloaded installer not found at $installerPath"
                  }
                  
                  $fileInfo = Get-Item $installerPath
                  Write-Host "‚úÖ Download completed: $($fileInfo.Name) ($($fileInfo.Length) bytes)"
                  
                  # Install JDK silently
                  Write-Host "üîß Installing JDK..."
                  $installArgs = @(
                      "/i", $installerPath,
                      "/quiet",
                      "/norestart",
                      "/log", $logPath,
                      "ADDLOCAL=FeatureMain,FeatureEnvironment,FeatureJarFileRunWith,FeatureJavaHome",
                      "INSTALLDIR=C:\Program Files\Eclipse Adoptium\jdk-21.0.5.11-hotspot\"
                  )
                  
                  Write-Host "Installation command: msiexec.exe $($installArgs -join ' ')"
                  $process = Start-Process -FilePath "msiexec.exe" -ArgumentList $installArgs -Wait -PassThru
                  
                  Write-Host "Installation process exit code: $($process.ExitCode)"
                  
                  # Check common MSI exit codes
                  switch ($process.ExitCode) {
                      0 { Write-Host "‚úÖ JDK installation completed successfully" }
                      1602 { throw "Installation canceled by user" }
                      1603 { throw "Fatal error during installation" }
                      1618 { throw "Another installation is in progress" }
                      1619 { throw "Installation package could not be opened" }
                      1633 { throw "Installation package is not supported on this platform" }
                      default { throw "Installation failed with exit code: $($process.ExitCode)" }
                  }
                  
                  # Wait a moment for installation to complete
                  Start-Sleep -Seconds 10
                  
                  # Verify installation
                  Write-Host "üîç Verifying installation..."
                  
                  # Refresh environment variables
                  $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
                  
                  # Check if Java is in PATH
                  try {
                      $javaVersion = & java -version 2>&1
                      if ($LASTEXITCODE -eq 0) {
                          Write-Host "‚úÖ Java command is accessible"
                          $javaVersion | ForEach-Object { Write-Host "  $_" }
                      } else {
                          Write-Host "‚ö†Ô∏è Java command returned exit code: $LASTEXITCODE"
                      }
                  } catch {
                      Write-Host "‚ö†Ô∏è Java command not immediately available (may need system restart)"
                  }
                  
                  # Check JAVA_HOME
                  $javaHome = [System.Environment]::GetEnvironmentVariable("JAVA_HOME", "Machine")
                  if ($javaHome) {
                      Write-Host "‚úÖ JAVA_HOME set to: $javaHome"
                  } else {
                      Write-Host "‚ö†Ô∏è JAVA_HOME not set (may need system restart)"
                  }
                  
                  # Check installation directory
                  $installDir = "C:\Program Files\Eclipse Adoptium"
                  if (Test-Path $installDir) {
                      Write-Host "‚úÖ JDK files found in: $installDir"
                      $jdkDirs = Get-ChildItem $installDir -Directory
                      foreach ($dir in $jdkDirs) {
                          Write-Host "  Found JDK: $($dir.Name)"
                      }
                  } else {
                      Write-Host "‚ö†Ô∏è JDK installation directory not found"
                  }
                  
                  Write-Host "=== Installation Complete ==="
                  
              } catch {
                  Write-Host "‚ùå Installation failed: $($_.Exception.Message)"
                  
                  # Show installation log if available
                  if (Test-Path $logPath) {
                      Write-Host "üìã Installation log contents:"
                      Get-Content $logPath | Select-Object -Last 50 | ForEach-Object { Write-Host "  $_" }
                  }
                  
                  # Show system info for debugging
                  Write-Host "üîç System Information:"
                  Write-Host "  OS: $(Get-WmiObject -Class Win32_OperatingSystem | Select-Object -ExpandProperty Caption)"
                  Write-Host "  Architecture: $env:PROCESSOR_ARCHITECTURE"
                  Write-Host "  PowerShell Version: $($PSVersionTable.PSVersion)"
                  
                  throw
              } finally {
                  # Cleanup installer file
                  if (Test-Path $installerPath) {
                      Remove-Item $installerPath -Force
                      Write-Host "üßπ Cleaned up installer file"
                  }
              }
        wait_for_results: true
        max_wait_time: 600
      register: install_result

    - name: Display installation results
      debug:
        msg: |
          Instance: {{ item.instance_id }}
          Status: {{ item.status }}
          Command ID: {{ item.command_id }}
          {% if item.status == 'Success' %}
          ‚úÖ Installation Output:
          {{ item.stdout | default('No output') }}
          {% elif item.status == 'Failed' %}
          ‚ùå Installation Failed:
          {{ item.stderr | default('No error details') }}
          {% else %}
          ‚ÑπÔ∏è Status: {{ item.status }}
          Output: {{ item.stdout | default('No output') }}
          {% endif %}
      loop: "{{ install_result.invocations }}"

    - name: Check for installation failures
      fail:
        msg: "JDK installation failed on one or more instances. Check the output above for details."
      when: install_result.invocations | selectattr('status', 'equalto', 'Failed') | list | length > 0

    - name: Installation summary
      debug:
        msg: |
          üéâ JDK Installation Summary:
          Total instances: {{ install_result.invocations | length }}
          Successful: {{ install_result.invocations | selectattr('status', 'equalto', 'Success') | list | length }}
          Failed: {{ install_result.invocations | selectattr('status', 'equalto', 'Failed') | list | length }}
          
          ‚ÑπÔ∏è Note: Environment variables may require a system restart to take full effect.
          Use the verification job to confirm the installation status.
