name: deploy-jdk-ssm

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  terraform_apply:
    runs-on: ubuntu-latest
    outputs:
      instance_ids: ${{ steps.outputs_json.outputs_instance_ids }}
      bucket: ${{ steps.outputs_json.outputs_bucket }}
      s3_key: ${{ steps.outputs_json.outputs_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform init
        working-directory: terraform
        run: terraform init

      - name: Ensure jq installed
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Terraform apply (create infra and optionally upload installer)
        working-directory: terraform
        run: terraform apply -auto-approve -var="local_installer_path=${{ github.workspace }}/files/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.exe"

      - name: Read terraform outputs (json) and set outputs
        id: outputs_json
        working-directory: terraform
        run: |
          terraform output -json > tfout.json
          cat tfout.json
          # extract instance_ids as a JSON array string
          INSTANCE_IDS=$(jq -c -r '.instance_ids.value' tfout.json)
          BUCKET=$(jq -r '.s3_bucket.value' tfout.json)
          # s3_key_list may be empty or not present; pick first or fallback key
          S3_KEY=$(jq -r 'if (.s3_key_list? and (.s3_key_list.value | length) > 0) then .s3_key_list.value[0] elif (.s3_key? and .s3_key.value != null) then .s3_key.value else "installers/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.exe" end' tfout.json)
          echo "outputs_instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
          echo "outputs_bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "outputs_key=$S3_KEY" >> $GITHUB_OUTPUT

  generate_presigned_and_run_ansible:
    needs: terraform_apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Prepare variables
        run: |
          echo "INST_RAW=${{ needs.terraform_apply.outputs.instance_ids }}" >> $GITHUB_ENV
          echo "BUCKET=${{ needs.terraform_apply.outputs.bucket }}" >> $GITHUB_ENV
          echo "KEY=${{ needs.terraform_apply.outputs.s3_key }}" >> $GITHUB_ENV
          echo "EXPIRY=300" >> $GITHUB_ENV

      - name: Ensure AWS CLI v2 available
        run: |
          aws --version || (curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip && unzip -q /tmp/awscliv2.zip -d /tmp && sudo /tmp/aws/install)

      - name: Generate presigned URL (AWS CLI)
        id: presign
        env:
          BUCKET: ${{ env.BUCKET }}
          KEY: ${{ env.KEY }}
          EXPIRY: ${{ env.EXPIRY }}
        run: |
          PRESIGNED=$(aws s3 presign "s3://$BUCKET/$KEY" --expires-in ${EXPIRY})
          echo "PRESIGNED_URL=${PRESIGNED}" >> $GITHUB_ENV
          echo "Presigned URL generated"

      - name: Show instance ids (sanity)
        run: echo "INST_RAW=$INST_RAW"
        env:
          INST_RAW: ${{ env.INST_RAW }}

      - name: Setup Python and install deps
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Ansible and AWS deps
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws

      - name: Run Ansible playbook to install JDK via SSM
        env:
          PRESIGNED_URL: ${{ env.PRESIGNED_URL }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          INST_RAW: ${{ env.INST_RAW }}
          BUCKET: ${{ env.BUCKET }}
          S3KEY: ${{ env.KEY }}
        run: |
          # Normalize instance ids into JSON array for the playbook
          python - <<'PY' > inst_list.json
import os, json
raw = os.environ.get('INST_RAW','[]')
try:
    arr = json.loads(raw)
except Exception:
    raw2 = raw.strip('"').replace('\\"','"')
    arr = json.loads(raw2) if raw2 else []
print(json.dumps(arr))
PY
          INST_JSON=$(cat inst_list.json)
          echo "Running ansible playbook on instances: $INST_JSON"
          ansible-playbook ansible/ssm_install_jdk.yml \
            -e "instance_ids=$INST_JSON" \
            -e "s3_bucket=${BUCKET}" \
            -e "s3_key=${S3KEY}" \
            -e "presigned_url=${PRESIGNED_URL}" \
            -e "aws_region=${{ secrets.AWS_REGION }}" \
            -v
