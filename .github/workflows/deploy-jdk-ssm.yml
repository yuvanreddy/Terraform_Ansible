name: deploy-jdk-ssm

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - verify
        - destroy
  push:
    branches: [ main ]

jobs:
  terraform_apply:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action != 'destroy' }}
    outputs:
      instance_ids: ${{ steps.set_outputs.outputs.instance_ids }}
      bucket: ${{ steps.set_outputs.outputs.bucket }}
      s3_key: ${{ steps.set_outputs.outputs.s3_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create files directory
        run: mkdir -p files

      - name: Download OpenJDK installer
        run: |
          JDK_URL="https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.5%2B11/OpenJDK21U-jdk_x64_windows_hotspot_21.0.5_11.msi"
          JDK_FILE="files/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.exe"
          
          curl -L -o "$JDK_FILE" "$JDK_URL"
          
          if [ ! -f "$JDK_FILE" ]; then
            echo "Error: Failed to download JDK installer"
            exit 1
          fi
          
          echo "Downloaded JDK installer: $(ls -lh $JDK_FILE)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform init
        working-directory: terraform
        run: terraform init

      - name: Terraform plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="local_installer_path=${{ github.workspace }}/files/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.exe" \
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}"

      - name: Terraform apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="local_installer_path=${{ github.workspace }}/files/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.exe" \
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}"

      - name: Set job outputs from Terraform
        id: set_outputs
        working-directory: terraform
        run: |
          terraform output -json > tfout.json
          cat tfout.json
          
          INSTANCE_IDS=$(terraform output -raw instance_ids 2>/dev/null || echo "[]")
          BUCKET=$(terraform output -raw s3_bucket 2>/dev/null || echo "")
          S3_KEY=$(terraform output -raw s3_key 2>/dev/null || terraform output -raw s3_key_list 2>/dev/null | jq -r '.[0] // "installers/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.exe"')
          
          if [ -z "$BUCKET" ]; then
            echo "Error: S3 bucket output is empty"
            exit 1
          fi
          
          if [ "$INSTANCE_IDS" = "[]" ]; then
            echo "Warning: No instance IDs found"
          fi
          
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "s3_key=$S3_KEY" >> $GITHUB_OUTPUT

  install_java:
    needs: terraform_apply
    runs-on: ubuntu-latest
    if: ${{ needs.terraform_apply.outputs.instance_ids != '[]' && needs.terraform_apply.outputs.bucket != '' && github.event.inputs.action != 'verify' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python and install dependencies
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible and AWS dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws

      - name: Validate S3 object exists
        env:
          BUCKET: ${{ needs.terraform_apply.outputs.bucket }}
          KEY: ${{ needs.terraform_apply.outputs.s3_key }}
        run: |
          if ! aws s3api head-object --bucket "$BUCKET" --key "$KEY" >/dev/null 2>&1; then
            echo "Error: S3 object s3://$BUCKET/$KEY does not exist"
            exit 1
          fi
          echo "S3 object validated: s3://$BUCKET/$KEY"

      - name: Generate presigned URL
        env:
          BUCKET: ${{ needs.terraform_apply.outputs.bucket }}
          KEY: ${{ needs.terraform_apply.outputs.s3_key }}
          EXPIRY: 900
        run: |
          PRESIGNED_URL=$(aws s3 presign "s3://$BUCKET/$KEY" --expires-in $EXPIRY)
          if [ -z "$PRESIGNED_URL" ]; then
            echo "Error: Failed to generate presigned URL"
            exit 1
          fi
          echo "PRESIGNED_URL=$PRESIGNED_URL" >> $GITHUB_ENV

      - name: Normalize instance IDs
        env:
          INST_RAW: ${{ needs.terraform_apply.outputs.instance_ids }}
        run: |
          echo "$INST_RAW" > inst_raw.txt
          if echo "$INST_RAW" | jq -e . >/dev/null 2>&1; then
            echo "$INST_RAW" | jq -c '.' > inst_list.json
          else
            echo '[]' > inst_list.json
          fi
          INST_JSON=$(cat inst_list.json)
          echo "INST_JSON=$INST_JSON" >> $GITHUB_ENV

      - name: Run Ansible playbook via SSM
        env:
          PRESIGNED_URL: ${{ env.PRESIGNED_URL }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          INST_JSON: ${{ env.INST_JSON }}
          BUCKET: ${{ needs.terraform_apply.outputs.bucket }}
          S3_KEY: ${{ needs.terraform_apply.outputs.s3_key }}
        run: |
          if [ ! -f "ansible/ssm_install_jdk.yml" ]; then
            echo "Error: Ansible playbook not found at ansible/ssm_install_jdk.yml"
            exit 1
          fi
          
          ansible-playbook ansible/ssm_install_jdk.yml \
            -e "instance_ids=$INST_JSON" \
            -e "s3_bucket=$BUCKET" \
            -e "s3_key=$S3_KEY" \
            -e "presigned_url=$PRESIGNED_URL" \
            -e "aws_region=$AWS_REGION" \
            -v

  verify_java:
    needs: [terraform_apply, install_java]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.terraform_apply.outputs.instance_ids != '[]' && (needs.install_java.result == 'success' || github.event.inputs.action == 'verify') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python and install dependencies
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible and AWS dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws

      - name: Get instance IDs for verification
        id: get_instances
        run: |
          if [ "${{ github.event.inputs.action }}" = "verify" ]; then
            # For manual verify, get instances from Terraform state
            cd terraform
            terraform init
            INST_IDS=$(terraform output -raw instance_ids 2>/dev/null || echo "[]")
          else
            # Use from previous job
            INST_IDS="${{ needs.terraform_apply.outputs.instance_ids }}"
          fi
          echo "INST_IDS=$INST_IDS" >> $GITHUB_ENV

      - name: Verify Java installation
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          INST_IDS: ${{ env.INST_IDS }}
        run: |
          if [ ! -f "ansible/verify_java.yml" ]; then
            echo "Creating Java verification playbook..."
            cat > ansible/verify_java.yml << 'EOF'
          ---
          - name: Verify Java Installation
            hosts: localhost
            gather_facts: false
            vars:
              aws_region: "{{ aws_region }}"
              instance_ids: "{{ instance_ids | from_json }}"
            
            tasks:
              - name: Verify Java via SSM
                amazon.aws.aws_ssm_send_command:
                  region: "{{ aws_region }}"
                  instance_ids: "{{ instance_ids }}"
                  document_name: "AWS-RunPowerShellScript"
                  parameters:
                    commands:
                      - |
                        Write-Host "=== Java Verification Report ==="
                        try {
                          $version = java -version 2>&1 | Out-String
                          Write-Host "✓ Java is installed and accessible"
                          Write-Host "Version: $version"
                        } catch {
                          Write-Host "✗ Java is not installed or not in PATH"
                          exit 1
                        }
                        
                        $javaHome = [System.Environment]::GetEnvironmentVariable("JAVA_HOME", "Machine")
                        if ($javaHome) {
                          Write-Host "✓ JAVA_HOME is set to: $javaHome"
                        } else {
                          Write-Host "⚠ JAVA_HOME is not set"
                        }
                        
                        Write-Host "=== Verification Complete ==="
                  wait_for_results: true
                  max_wait_time: 120
                register: verification_result

              - name: Show verification results
                debug:
                  msg: "Instance {{ item.instance_id }}: {{ item.status }} - {{ item.stdout }}"
                loop: "{{ verification_result.invocations }}"
          EOF
          fi
          
          ansible-playbook ansible/verify_java.yml \
            -e "instance_ids=$INST_IDS" \
            -e "aws_region=$AWS_REGION" \
            -v

  terraform_destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform init
        working-directory: terraform
        run: terraform init

      - name: Terraform destroy
        working-directory: terraform
        run: |
          terraform destroy -auto-approve \
            -var="local_installer_path=dummy_path" \
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}"

      - name: Cleanup verification
        run: |
          echo "All infrastructure has been destroyed"
          echo "Verify in AWS console that all resources are removed"
