name: deploy-jdk-ssm

on:
  workflow_dispatch:
    inputs:
      create_s3_bucket:
        description: 'Create new S3 bucket (false to use existing)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      create_vpc:
        description: 'Create new VPC (false to use existing)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      create_instances:
        description: 'Create EC2 instances'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      instance_count:
        description: 'Number of instances to create'
        required: false
        default: '2'
        type: string
  push:
    branches: [ main ]

env:
  TF_VAR_create_s3_bucket: ${{ github.event.inputs.create_s3_bucket || 'true' }}
  TF_VAR_create_vpc: ${{ github.event.inputs.create_vpc || 'true' }}
  TF_VAR_create_instances: ${{ github.event.inputs.create_instances || 'true' }}
  TF_VAR_instance_count: ${{ github.event.inputs.instance_count || '2' }}

jobs:
  terraform_deployment:
    runs-on: ubuntu-latest
    outputs:
      instance_ids: ${{ steps.set_outputs.outputs.instance_ids }}
      bucket: ${{ steps.set_outputs.outputs.bucket }}
      s3_key: ${{ steps.set_outputs.outputs.s3_key }}
      vpc_id: ${{ steps.set_outputs.outputs.vpc_id }}
      subnet_id: ${{ steps.set_outputs.outputs.subnet_id }}
      security_group_id: ${{ steps.set_outputs.outputs.security_group_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Terraform backend bucket if needed
        run: |
          BACKEND_BUCKET="terraform-state-jdk-deployment-${{ github.repository_owner }}"
          if ! aws s3api head-bucket --bucket "$BACKEND_BUCKET" 2>/dev/null; then
            echo "Creating Terraform state bucket: $BACKEND_BUCKET"
            aws s3 mb "s3://$BACKEND_BUCKET" --region ${{ secrets.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket "$BACKEND_BUCKET" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BACKEND_BUCKET" --server-side-encryption-configuration '{
              "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]
            }'
            echo "‚úÖ Terraform state bucket created successfully"
          else
            echo "‚úÖ Terraform state bucket already exists: $BACKEND_BUCKET"
          fi

      - name: Create DynamoDB table for state locking
        run: |
          TABLE_NAME="terraform-state-lock-jdk"
          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
            echo "Creating DynamoDB table for state locking: $TABLE_NAME"
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ secrets.AWS_REGION }}
            
            echo "Waiting for table to be active..."
            aws dynamodb wait table-exists --table-name "$TABLE_NAME"
            echo "‚úÖ DynamoDB table created successfully"
          else
            echo "‚úÖ DynamoDB table already exists: $TABLE_NAME"
          fi

      - name: Initialize Terraform backend
        working-directory: terraform
        run: |
          BACKEND_BUCKET="terraform-state-jdk-deployment-${{ github.repository_owner }}"
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BACKEND_BUCKET"
              key            = "jdk-deployment/terraform.tfstate"
              region         = "${{ secrets.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "terraform-state-lock-jdk"
            }
          }
          EOF
          
          echo "üì¶ Initializing Terraform..."
          terraform init -reconfigure

      - name: Validate Terraform configuration
        working-directory: terraform
        run: |
          echo "üîç Validating Terraform configuration..."
          terraform validate
          echo "‚úÖ Terraform configuration is valid"

      - name: Terraform plan
        working-directory: terraform
        run: |
          echo "üìã Creating Terraform plan..."
          terraform plan \
            -var="local_installer_path=${{ github.workspace }}/files/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.msi" \
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="key_pair_name=${{ secrets.KEY_PAIR_NAME }}" \
            -out=tfplan
          
          echo "‚úÖ Terraform plan created successfully"

      - name: Terraform apply
        working-directory: terraform
        run: |
          echo "üöÄ Applying Terraform configuration..."
          terraform apply -auto-approve tfplan
          echo "‚úÖ Terraform apply completed successfully"

      - name: Set job outputs from Terraform
        id: set_outputs
        working-directory: terraform
        run: |
          echo "üìä Extracting Terraform outputs..."
          
          # Save outputs to JSON file for debugging
          terraform output -json > tfout.json
          
          # Extract individual outputs
          INSTANCE_IDS=$(terraform output -raw instance_ids 2>/dev/null || echo "[]")
          BUCKET=$(terraform output -raw s3_bucket 2>/dev/null || echo "")
          S3_KEY=$(terraform output -raw s3_key 2>/dev/null || echo "")
          VPC_ID=$(terraform output -raw vpc_id 2>/dev/null || echo "")
          SUBNET_ID=$(terraform output -raw subnet_id 2>/dev/null || echo "")
          SECURITY_GROUP_ID=$(terraform output -raw security_group_id 2>/dev/null || echo "")
          
          # Set GitHub Actions outputs
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "s3_key=$S3_KEY" >> $GITHUB_OUTPUT
          echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
          echo "subnet_id=$SUBNET_ID" >> $GITHUB_OUTPUT
          echo "security_group_id=$SECURITY_GROUP_ID" >> $GITHUB_OUTPUT
          
          # Display outputs for verification
          echo "========================================="
          echo "üìã DEPLOYMENT SUMMARY"
          echo "========================================="
          echo "‚úÖ Instance IDs: $INSTANCE_IDS"
          echo "‚úÖ S3 Bucket: $BUCKET"
          echo "‚úÖ S3 Key: $S3_KEY"
          echo "‚úÖ VPC ID: $VPC_ID"
          echo "‚úÖ Subnet ID: $SUBNET_ID"
          echo "‚úÖ Security Group ID: $SECURITY_GROUP_ID"
          echo "========================================="

      - name: Verify instance status
        if: ${{ env.TF_VAR_create_instances == 'true' }}
        run: |
          echo "üîç Verifying EC2 instance status..."
          
          INSTANCE_IDS="${{ steps.set_outputs.outputs.instance_ids }}"
          if [ "$INSTANCE_IDS" != "[]" ] && [ -n "$INSTANCE_IDS" ]; then
            # Parse JSON array to get individual instance IDs
            echo "$INSTANCE_IDS" | jq -r '.[]' | while read -r instance_id; do
              echo "Checking instance: $instance_id"
              
              # Get instance state
              STATE=$(aws ec2 describe-instances \
                --instance-ids "$instance_id" \
                --query 'Reservations[0].Instances[0].State.Name' \
                --output text 2>/dev/null || echo "unknown")
              
              echo "  Status: $STATE"
              
              # Get instance details
              aws ec2 describe-instances \
                --instance-ids "$instance_id" \
                --query 'Reservations[0].Instances[0].[PrivateIpAddress,PublicIpAddress,InstanceType,Platform]' \
                --output table 2>/dev/null || true
            done
            
            echo "‚úÖ Instance verification completed"
          else
            echo "‚ÑπÔ∏è No instances were created"
          fi

      - name: Display next steps
        run: |
          echo "========================================="
          echo "üìå NEXT STEPS"
          echo "========================================="
          echo "1. To configure instances with Ansible:"
          echo "   - Run the 'Run Ansible Deployment Only' workflow"
          echo "   - Or run Ansible locally using the instance IDs above"
          echo ""
          echo "2. To access Windows instances:"
          echo "   - Use RDP with the admin password from secrets"
          echo "   - Or use AWS Systems Manager Session Manager"
          echo ""
          echo "3. To destroy resources later:"
          echo "   - Run terraform destroy locally"
          echo "   - Or create a separate destroy workflow"
          echo "========================================="

      - name: Upload Terraform state artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: |
            terraform/tfout.json
            terraform/tfplan
          retention-days: 7